# This is the job template for building the binaries for one configuration. It does:
# - setup the machine
# - build binaries for desired configuration
# - upload binaries artifacts for the desired configuration

parameters:
  - name: BUILD_SUFFIX
    type: string
  - name: GBALLOC_LL_TYPE
    type: string
  - name: FSANITIZE_TYPE
    type: string
  - name: build_configuration
    default: "Debug"
  - name: ARCH_TYPE
    default: "x64"
  - name: cmake_options
    type: string
    default: "-Drun_reals_check:bool=ON -Drun_unittests:bool=ON -Drun_int_tests:bool=ON -Duse_cppunittest:bool=ON"
  # If this parameter is specified the specified test suite will be run without invoking ctest
  # This is very useful for debugging a single test suite because ctest still does not allow Watson dumps to be collected
  - name: run_test_suite_without_ctest
    type: string
    default: ""
  # Settings to add an app verifier step for ctest
  - name: with_app_verifier
    type: boolean
    default: false
  - name: repo_root_override
    default: ""
  - name: binary_name_suffix
    default: ".exe"
  - name: appverifier_skip_tests_list
    type: string
    default: ""

jobs:
- job: build_and_run_tests_${{ parameters.BUILD_SUFFIX }}
  displayName: 'Build and run tests, build_configuration: ${{ parameters.build_configuration }}, ${{ parameters.GBALLOC_LL_TYPE}}, ARCH_TYPE=${{ parameters.ARCH_TYPE }}, FSANITIZE_TYPE: ${{ parameters.FSANITIZE_TYPE}}'

  variables:
    ${{ if eq(parameters.FSANITIZE_TYPE, 'ON') }}:
      use_vld_option: '-Duse_vld:bool=OFF'
    ${{ if eq(parameters.FSANITIZE_TYPE, 'OFF') }}:
      use_vld_option: '-Duse_vld:bool=ON'

  pool:
    name: Azure-MessagingStore-WinBuildPoolVS2022
    demands:
    - Cmd
    - msbuild
    - cmake
    - visualstudio

  workspace:
    clean: all

  steps:
  - checkout: self
    submodules: true
    clean: false

  - task: BatchScript@1
    displayName: 'Git submodule update'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'submodule update --init --force'

  - task: BatchScript@1
    displayName: 'Git submodule clean'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'submodule foreach --recursive "git clean -xdff"'

  - task: BatchScript@1
    displayName: 'Git clean'
    inputs:
      filename: 'C:\Program Files\Git\bin\git.exe'
      arguments: 'clean -xdff'

  - task: BatchScript@1
    displayName: 'Setup VS Vars'
    inputs:
      filename: '"c:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"'
      modifyEnvironment: true

  # Cleanup appverifier from any previous runs
  - template : disable_appverifier.yml
    parameters:
      ${{ if ne(parameters.repo_root_override, '') }}:
        repo_root: ${{ parameters.repo_root_override }}

  - task: CMake@1
    displayName: 'CMake .. ${{ parameters.cmake_options }} ${{ variables.use_vld_option }} -DGBALLOC_LL_TYPE:string=${{ parameters.GBALLOC_LL_TYPE }} -DCMAKE_BUILD_TYPE=${{ parameters.build_configuration }} -G "Visual Studio 17 2022" -A ${{ parameters.ARCH_TYPE }}'
    inputs:
      workingDirectory: 'cmake_build'
      cmakeArgs: '.. ${{ parameters.cmake_options }} ${{ variables.use_vld_option }} -DGBALLOC_LL_TYPE:string=${{ parameters.GBALLOC_LL_TYPE }} -DCMAKE_BUILD_TYPE=${{ parameters.build_configuration }} -G "Visual Studio 17 2022" -A ${{ parameters.ARCH_TYPE }}'

  - task: VSBuild@1
    displayName: 'Build solution cmake_build\*.sln'
    inputs:
      solution: 'cmake_build\*.sln'
      msbuildArgs: '/t:restore /t:build'
      configuration: ${{ parameters.build_configuration }}
      maximumCpuCount: true

  - template : start_logman.yml

  # in the gate address sanitizer has problems running which are not reproducible locally, so skipping Address Sanitizer for vstest (note: ctest is perfectly fine with Address Sanitizer)
  # here's example:
  #   vstest.console will output
  # Starting test execution, please wait...
  #A total of 257 test files matched the specified pattern.
  ##[error]The active test run was aborted. Reason: Test host process crashed : AddressSanitizer: CHECK failed: asan_thread.cpp:273 "((tid())) == ((0))" (0x1, 0x0) (tid=11016)
  # [continues, with none of our code on any stack]
  - ${{ if and(eq(parameters.FSANITIZE_TYPE, 'OFF'), eq(parameters.run_test_suite_without_ctest, '')) }}:
    - task: VSTest@2
      displayName: '[blockstorage] VsTest - testAssemblies (no int tests)'
      inputs:
        testAssemblyVer2: |
          $(Build.BinariesDirectory)\${{ parameters.build_configuration }}\**\*_ut_*.dll
        runInParallel: true
        runTestsInIsolation: true
        codeCoverageEnabled: false
        otherConsoleOptions: '-- RunConfiguration.ExecutionThreadApartmentState=MTA'

  - ${{ if eq(parameters.run_test_suite_without_ctest, '') }}:
    - task: CmdLine@1
      displayName: 'Run ctest'
      inputs:
        filename: ctest
        arguments: '-C "${{ parameters.build_configuration }}" --output-on-failure'
        workingFolder: 'cmake_build'

  - ${{ if and(eq(parameters.FSANITIZE_TYPE, 'OFF'), and(eq(parameters.run_test_suite_without_ctest, ''), parameters.with_app_verifier)) }}:
    - template : run_ctests_with_appverifier.yml
      parameters:
        ${{ if ne(parameters.repo_root_override, '') }}:
          repo_root: ${{ parameters.repo_root_override }}
        binary_name_suffix: ${{ parameters.binary_name_suffix }}
        ctest_tests_bin_directory: 'cmake_build'
        ${{ if ne(parameters.appverifier_skip_tests, '') }}:
          ctest_additional_args: "-E ${{ parameters.appverifier_skip_tests }}"
        test_steps:
        - task: CmdLine@1
          displayName: 'Run ctest'
          inputs:
            filename: ctest
            ${{ if ne(parameters.appverifier_skip_tests, '') }}:
              arguments: '-C "${{ parameters.build_configuration }}" --output-on-failure -E ${{ parameters.appverifier_skip_tests }}'
            ${{ else }}:
              arguments: '-C "${{ parameters.build_configuration }}" --output-on-failure'
            workingFolder: 'cmake_build'

  - ${{ if not(eq(parameters.run_test_suite_without_ctest, '')) }}:
    - task: CmdLine@1
      displayName: 'Run ${{ parameters.run_test_suite_without_ctest }}'
      inputs:
        filename: '$(Build.BinariesDirectory)\${{ parameters.build_configuration }}\${{ parameters.run_test_suite_without_ctest }}\${{ parameters.run_test_suite_without_ctest }}.exe'
        workingFolder: '$(Build.BinariesDirectory)\${{ parameters.build_configuration }}\${{ parameters.run_test_suite_without_ctest }}'

  - template : stop_logman.yml

  - task: PublishBuildArtifacts@1
    displayName: 'Publish ${{ parameters.ARCH_TYPE }} ${{ parameters.build_configuration}} Artifacts'
    inputs:
      pathtoPublish: $(Build.BinariesDirectory)
      artifactName: ${{ parameters.build_configuration}}_${{ parameters.ARCH_TYPE }}_artifacts
      parallel: true
    condition: failed()
